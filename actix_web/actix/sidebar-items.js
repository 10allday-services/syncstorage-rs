initSidebarItems({"enum":[["ActorState","Actor execution state"],["Running",""],["SendError",""]],"fn":[["run","Start the System and execute supplied future."],["spawn","Spawns a future on the current arbiter."]],"mod":[["actors","Helper actors"],["dev","The `actix` prelude for library developers"],["fut","Custom `Future` implementation with `Actix` support"],["fut","Custom `Future` implementation with `Actix` support"],["io",""],["msgs","Actix system messages"],["msgs","Actix system messages"],["resolver","DNS resolver and connector utility actor"],["signal","An actor implementation of Unix signal handling"]],"struct":[["ActorResponse","Helper type for representing different type of message responses"],["Addr","Address of the actor"],["Arbiter","Event loop controller"],["Condition",""],["Context","Actor execution context"],["IntervalFunc","An `ActorStream` that periodically runs a function in the actor's context."],["MessageResult","Helper type that implements `MessageResponse` trait"],["Recipient","`Recipient` type allows to send one specific message to an actor."],["RecipientRequest","`RecipientRequest` is a `Future` which represents asynchronous message sending process."],["Request","`Request` is a `Future` which represents asynchronous message sending process."],["Response","Helper type for representing different type of message responses"],["SpawnHandle","Spawned future handle. Could be used for cancelling spawned future."],["Supervisor","Actor supervisor"],["SyncArbiter","Sync arbiter"],["SyncContext","Sync actor execution context"],["TimerFunc","An `ActorFuture` that runs a function in the actor's context after a specified amount of time."]],"trait":[["Actor","Actors are objects which encapsulate state and behavior."],["ActorContext","Actor execution context"],["ArbiterService","Trait defines arbiter's service."],["ContextFutureSpawner","Helper trait which can spawn future into actor's context"],["Handler","Message handler"],["Message","Message type"],["StreamHandler","Stream handler"],["Supervised","Actors with ability to restart after failure"],["SystemService","Trait defines system's service."]],"type":[["ResponseActFuture","A specialized actor future for async message handler"],["ResponseFuture","A specialized future for async message handler"]]});